project(inorder_traversal)
add_executable(${PROJECT_NAME} inorder_traversal.cpp)

project(preorder_traversal)
add_executable(${PROJECT_NAME} preorder_traversal.cpp)

project(postorder_traversal)
add_executable(${PROJECT_NAME} postorder_traversal.cpp)



project(N_ary_tree_lever_traversal)
add_executable(${PROJECT_NAME} N_ary_tree_level_traversal.cpp)

project(N_ary_preorder)
add_executable(${PROJECT_NAME} N_ary_preorder.cpp)

project(N_ary_postorder)
add_executable(${PROJECT_NAME} N_ary_postorder.cpp)

project(vertical_order)
add_executable(${PROJECT_NAME} vertical_order.cpp)

project(deepest_leaves_sum)
add_executable(${PROJECT_NAME} deepest_leaves_sum.cpp)

project(same_tree)
add_executable(${PROJECT_NAME} same_tree.cpp)

project(symmetic_tree)
add_executable(${PROJECT_NAME} symmetic_tree.cpp)

project(tree_max_depth)
add_executable(${PROJECT_NAME} tree_max_depth.cpp)


project(balanced_binary_tree)
add_executable(${PROJECT_NAME} balanced_binary_tree.cpp)

project(subtree_of_another)
add_executable(${PROJECT_NAME} subtree_of_another.cpp)

project(uni_valued_tree)
add_executable(${PROJECT_NAME} uni_valued_tree.cpp)


project(rebuild_tree)
add_executable(${PROJECT_NAME} rebuild_tree.cpp)

project(same_leaves)
add_executable(${PROJECT_NAME} same_leaves.cpp)

project(binary_tree_prune)
add_executable(${PROJECT_NAME} binary_tree_prune.cpp)

project(tree_delete_target)
add_executable(${PROJECT_NAME} tree_delete_target.cpp)


